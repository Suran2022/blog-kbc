version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: blog-mysql-prod
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: qhdx2023-
      MYSQL_DATABASE: blog
      MYSQL_USER: root
      MYSQL_PASSWORD: qhdx2023-
    ports:
      - "3306:3306"
    volumes:
      - mysql_data_prod:/var/lib/mysql
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./mysql/my.cnf:/etc/mysql/conf.d/my.cnf
      - ./logs/mysql:/var/log/mysql
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - blog-network-prod
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Redis缓存
  redis:
    image: redis:6.2-alpine
    container_name: blog-redis-prod
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data_prod:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    networks:
      - blog-network-prod
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # 后端应用
  backend:
    build:
      context: ../blog-backend
      dockerfile: Dockerfile
    container_name: blog-backend-prod
    restart: always
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/blog?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai
      SPRING_DATASOURCE_USERNAME: ${MYSQL_USER}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD}
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      FILE_UPLOAD_PATH: /app/uploads
      JAVA_OPTS: -Xms512m -Xmx1024m -XX:+UseG1GC
    depends_on:
      - mysql
      - redis
    volumes:
      - ./logs/backend:/app/logs
      - ./uploads:/app/uploads
    networks:
      - blog-network-prod
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # 前端应用
  frontend:
    build:
      context: ../blog-frontend/blog-app
      dockerfile: Dockerfile
    container_name: blog-frontend-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
    networks:
      - blog-network-prod
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # 监控服务 (可选)
  prometheus:
    image: prom/prometheus:latest
    container_name: blog-prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - blog-network-prod
    profiles:
      - monitoring

  # Grafana监控面板 (可选)
  grafana:
    image: grafana/grafana:latest
    container_name: blog-grafana
    restart: always
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - blog-network-prod
    profiles:
      - monitoring

volumes:
  mysql_data_prod:
  redis_data_prod:
  prometheus_data:
  grafana_data:

networks:
  blog-network-prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16